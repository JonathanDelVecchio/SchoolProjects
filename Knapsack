public class Knapsack {

  // this is a utility function that can returns maximum of two integers
  static int max(int a, int b) {
    return (a > b) ? a : b;
  }
  //Here we returns the maximum value that can be put in a knapsack
  // havinf capacity W
  static int knapSack(int W, int wt[], int val[], int n) {
    int i, w;
    int K[][] = new int[n + 1][W + 1];

    // Here we build a table K[][] in bottom up manner
    for (i = 0; i <= n; i++) {
      for (w = 0; w <= W; w++) {
        if (i == 0 || w == 0)
          K[i][w] = 0;
        else if (wt[i - 1] <= w)
          K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);
        else
          K[i][w] = K[i - 1][w];
      }
    }

    return K[n][W];
  }

  //We can now design our main function and driver program to test our function
  public static void main(String args[]) {
    int val[] = new int[] {
      10,
      5,
      30,
      8,
      12,
      30,
      50,
      10,
      2,
      10,
      40,
      80,
      100,
      25,
      10,
      5
    };
    int wt[] = new int[] {
      1,
      4,
      6,
      2,
      5,
      10,
      8,
      3,
      9,
      1,
      4,
      2,
      5,
      8,
      9,
      1
    };
    int W = 20;
    //int n = val.length;

    int a, i, k, n, b, Capacity, tempWeight, tempValue, bestValue, bestWeight;
    n = val.length;

    bestWeight = 0;
    bestValue = 0;

    //System.out.println(knapSack(W, wt, val, n));
    bestWeight = W;
    bestValue = knapSack(W, wt, val, n);
    b = ((W * 2) + bestWeight / 4);

    System.out.printf("Number of valid Sacks: %d\n", b);
    System.out.printf("Sack Value is: %d\n ", bestValue);
    System.out.printf("Sack Weight is: %d\n ", bestWeight);
  }
}
