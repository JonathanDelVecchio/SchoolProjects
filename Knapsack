import java.io.*;
import java.math.*;
import java.lang.*;
public class Main {
  public static void main(String[] args) {
    int N = 16; // Total number of items
    int Capacity = 20; // Maximum weight the robber can carry
    int Weights[] = {
      1,
      4,
      6,
      2,
      5,
      10,
      8,
      3,
      9,
      1,
      4,
      2,
      5,
      8,
      9,
      1
    };
    int Values[] = {
      10,
      5,
      30,
      8,
      12,
      30,
      50,
      10,
      2,
      10,
      40,
      80,
      100,
      25,
      10,
      5
    };
    int b = 0; // stores the number of iterations
    int dp[][] = new int[N][Capacity + 1];
    // Capacity + 1 because weight can range from 0 to 20 not 0 to 19
    int store[][] = new int[N][Capacity + 1];
    // keep[i][j] stores whether item i is kept in knapsack if we have capacity j
    for (int i = 0; i < N; i++) {
      for (int j = 0; j <= Capacity; j++) {
        b++;
        if (i == 0) {
          // if i = 0, then take item only if its weight is less the or equal to capacity of knapsack
          dp[i][j] = (Weights[i] <= j) ? Values[i] : 0;
          continue;
        }
        if (j == 0) {
          // if capacity of knapsack is zero, we can't pick any item.
          dp[i][j] = 0;
          continue;
        }
        // Remember the recursive relation for DP[i][j]
        if (j - Weights[i] >= 0 && Values[i] + dp[i - 1][j - Weights[i]] > dp[i - 1][j]) {
          dp[i][j] = Values[i] + dp[i - 1][j - Weights[i]];
          store[i][j] = 1;
        } else {
          dp[i][j] = dp[i - 1][j];
          store[i][j] = 0;
        }
      }
    }
    // find the weight of subset of items picked
    int bestWeight = 0;
    int maxCapacity = Capacity;
    for (int i = 0; i < N; i++) {
      if (store[i][Capacity] == 1) {
        bestWeight += Weights[i];
        maxCapacity -= Weights[i];
      }
    }
    System.out.println("Weight of Knapsack =" + bestWeight);
    System.out.println("Maximum value of contents =" + dp[N - 1][Capacity]);
    System.out.println("Number of Valid Knapsacks = " + b);
  }
}
