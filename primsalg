import java.util.*;
import java.lang.*;
import java.io.*;
public class Graph {
    static int totalWeight = 0;
    //Class that implements an Edge
    class Edge implements Comparable < Edge > {
        int src,
        dest,
        weight;
        //Method to sort edges based on their weight
        public int compareTo(Edge compareEdge) {
            return this.weight - compareEdge.weight;
        }
    };
    //Method to represent a subset for union-find
    class subset {
        int parent, rank;
    };
    //Representing vertices as V and edges as E
    int V, E;
    Edge edge[];
    //Creates a graph with E edges and V vertices
    Graph(int v, int e) {
        V = v;
        E = e;
        edge = new Edge[E];
        for (int i = 0; i < e; ++i) {
            edge[i] = new Edge();
        }
    }
    //Method to find the set of an element i using path compression
    int find(subset subsets[], int i) {
        if (subsets[i].parent != i) {
            subsets[i].parent = find(subsets, subsets[i].parent);
        }
        return subsets[i].parent;
    }
    //Method to do the union of sets x and y
    void Union(subset subsets[], int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);
        //Attach a smaller rank tree under the root of high rank tree
        if (subsets[xroot].rank < subsets[yroot].rank) {
            subsets[xroot].parent = yroot;
        } else if (subsets[xroot].rank > subsets[yroot].rank) {
            subsets[yroot].parent = xroot;
        } else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }
    // Building an MST using Prim's Algorithm
    void PrimMST() {
        Edge result[] = new Edge[V];
        // 'e' index for result[]; 'i' index for sorted edges
        int e = 0;
        int i = 0;
        for (i = 0; i < V; ++i) {
            result[i] = new Edge();
        }
        // Sort all edges in increasing order of their weight.
        // Create copy of array of edges if graph is not changing
        Arrays.sort(edge);
        subset subsets[] = new subset[V];
        for (i = 0; i < V; ++i) {
            subsets[i] = new subset();
        }
        // Create V subsets
        for (int v = 0; v < V; ++v) {
            subsets[v].parent = v;
            subsets[v].rank = 0;
        }
        // 'i' index for next edge
        i = 0;
        // # of edges to be taken is equal to V-1
        while (e < V - 1) {
            // Pick smallest edge, then increment for next iteration
            Edge next_edge = new Edge();
            next_edge = edge[i++];
            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);
            // If including this edge does't cause a cycle,
            // include it and increment the index for next edge,
            // Else discard the next_edge
            if (x != y) {
                result[e++] = next_edge;
                Union(subsets, x, y);
            }
        }
        int totalMSTWeight = 0;
        // Print result[]
        System.out.println("Here are the edges of the MST and their cost");
        int totCost = 0;
        for (i = 0; i < e; ++i) {
            System.out.println(result[i].src + " - " + result[i].dest + " = " + result[i].weight);
            totCost += result[i].weight;
        }
        System.out.println("\nThe total cost of the minimum spanning tree = " + totCost);
    }
    // Main program, pass in variables
    public static void main(String[] args) {
        // 4 vertices, 5 edges
        int V = 4;
        int E = 5;
        Graph graph = new Graph(V, E);
        // Edge 0-1
        graph.edge[0].src = 0;
        graph.edge[0].dest = 1;
        graph.edge[0].weight = 10;
        // Edge 0-2
        graph.edge[1].src = 0;
        graph.edge[1].dest = 2;
        graph.edge[1].weight = 6;
        // Edge 0-3
        graph.edge[2].src = 0;
        graph.edge[2].dest = 3;
        graph.edge[2].weight = 5;
        // Edge 1-3
        graph.edge[3].src = 1;
        graph.edge[3].dest = 3;
        graph.edge[3].weight = 15;
        // Edge 2-3
        graph.edge[4].src = 2;
        graph.edge[4].dest = 3;
        graph.edge[4].weight = 4;
        graph.KruskalMST();
    }
}
